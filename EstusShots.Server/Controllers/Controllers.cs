//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using EstusShots.Server.Services;
using EstusShots.Shared.Models;
using EstusShots.Shared.Models.Parameters;
using EstusShots.Shared.Interfaces.Controllers;

namespace EstusShots.Server.Controllers
{
    [ApiController]
    [Route("/api/[controller]/[action]")]
    public class DrinksController : BaseController, IDrinksController
    {
        private readonly DrinksService _service;

        public DrinksController(ILogger<DrinksController> logger, DrinksService service) : base(logger)
        {
            _service = service;
        }

        [HttpPost]
        public async Task<ApiResponse<GetDrinksResponse>> GetDrinks(GetDrinksParameter parameter)
            => await ServiceCall(() => _service.GetDrinks(parameter));

        [HttpPost]
        public async Task<ApiResponse<GetDrinkDetailsResponse>> GetDrinkDetails(GetDrinkDetailsParameter parameter)
            => await ServiceCall(() => _service.GetDrinkDetails(parameter));

        [HttpPost]
        public async Task<ApiResponse<SaveDrinkResponse>> SaveDrink(SaveDrinkParameter parameter)
            => await ServiceCall(() => _service.SaveDrink(parameter));

    }

    [ApiController]
    [Route("/api/[controller]/[action]")]
    public class EnemiesController : BaseController, IEnemiesController
    {
        private readonly EnemiesService _service;

        public EnemiesController(ILogger<EnemiesController> logger, EnemiesService service) : base(logger)
        {
            _service = service;
        }

        [HttpPost]
        public async Task<ApiResponse<GetEnemiesResponse>> GetEnemies(GetEnemiesParameter parameter)
            => await ServiceCall(() => _service.GetEnemies(parameter));

        [HttpPost]
        public async Task<ApiResponse<GetEnemyResponse>> GetEnemy(GetEnemyParameter parameter)
            => await ServiceCall(() => _service.GetEnemy(parameter));

        [HttpPost]
        public async Task<ApiResponse<SaveEnemyResponse>> SaveEnemy(SaveEnemyParameter parameter)
            => await ServiceCall(() => _service.SaveEnemy(parameter));

        [HttpPost]
        public async Task<ApiResponse<DeleteEnemyResponse>> DeleteEnemy(DeleteEnemyParameter parameter)
            => await ServiceCall(() => _service.DeleteEnemy(parameter));

    }

    [ApiController]
    [Route("/api/[controller]/[action]")]
    public class EpisodesController : BaseController, IEpisodesController
    {
        private readonly EpisodesService _service;

        public EpisodesController(ILogger<EpisodesController> logger, EpisodesService service) : base(logger)
        {
            _service = service;
        }

        [HttpPost]
        public async Task<ApiResponse<GetEpisodesResponse>> GetEpisodes(GetEpisodesParameter parameter)
            => await ServiceCall(() => _service.GetEpisodes(parameter));

        [HttpPost]
        public async Task<ApiResponse<GetEpisodeResponse>> GetEpisode(GetEpisodeParameter parameter)
            => await ServiceCall(() => _service.GetEpisode(parameter));

        [HttpPost]
        public async Task<ApiResponse<SaveEpisodeResponse>> SaveEpisode(SaveEpisodeParameter parameter)
            => await ServiceCall(() => _service.SaveEpisode(parameter));

    }

    [ApiController]
    [Route("/api/[controller]/[action]")]
    public class PlayersController : BaseController, IPlayersController
    {
        private readonly PlayersService _service;

        public PlayersController(ILogger<PlayersController> logger, PlayersService service) : base(logger)
        {
            _service = service;
        }

        [HttpPost]
        public async Task<ApiResponse<GetPlayersResponse>> GetPlayers(GetPlayersParameter parameter)
            => await ServiceCall(() => _service.GetPlayers(parameter));

        [HttpPost]
        public async Task<ApiResponse<GetPlayerDetailsResponse>> GetPlayerDetails(GetPlayerDetailsParameter parameter)
            => await ServiceCall(() => _service.GetPlayerDetails(parameter));

        [HttpPost]
        public async Task<ApiResponse<SavePlayerResponse>> SavePlayer(SavePlayerParameter parameter)
            => await ServiceCall(() => _service.SavePlayer(parameter));

        [HttpPost]
        public async Task<ApiResponse<DeletePlayerResponse>> DeletePlayer(DeletePlayerParameter parameter)
            => await ServiceCall(() => _service.DeletePlayer(parameter));

    }

    [ApiController]
    [Route("/api/[controller]/[action]")]
    public class SeasonsController : BaseController, ISeasonsController
    {
        private readonly SeasonsService _service;

        public SeasonsController(ILogger<SeasonsController> logger, SeasonsService service) : base(logger)
        {
            _service = service;
        }

        [HttpPost]
        public async Task<ApiResponse<GetSeasonsResponse>> GetSeasons(GetSeasonsParameter parameter)
            => await ServiceCall(() => _service.GetSeasons(parameter));

        [HttpPost]
        public async Task<ApiResponse<GetSeasonResponse>> GetSeason(GetSeasonParameter parameter)
            => await ServiceCall(() => _service.GetSeason(parameter));

        [HttpPost]
        public async Task<ApiResponse<SaveSeasonResponse>> SaveSeason(SaveSeasonParameter parameter)
            => await ServiceCall(() => _service.SaveSeason(parameter));

    }

}